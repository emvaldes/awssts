name: 'AWS STS Assume-Role'
description: 'Auto-Generate AWS STS Assume-Role'
####----------------------------------------------------------------------------
inputs:
  aws-access-key-id:
    description: 'AWS Access Key-ID'
    required: true
    default: ''
  aws-secret-access-key:
    description: 'AWS Secret Access Key'
    required: true
    default: ''
  aws-shared-credentials-file:
    description: 'AWS Shared Credentials File'
    required: true
    default: ''
  aws-default-profile:
    description: 'AWS Default Profile'
    required: true
    default: 'default'
  aws-default-region:
    description: 'AWS Default Region'
    required: true
    default: 'us-east-1'
  aws-default-account:
    description: 'AWS Default Account Number'
    required: true
    default: ''
  session-timestamp:
    description: 'Session Time-Stamp'
    required: true
    default: ''
  devops-access-role:
    description: 'DevOps Access Role'
    required: true
    default: 'DevOps--Custom-Access.Role'
  devops-account-id:
    description: 'DevOps Account ID'
    required: true
    default: ''
  devops-account-name:
    description: 'DevOps Account Name'
    required: true
    default: ''
####----------------------------------------------------------------------------
outputs:
  credentials-file:
    description: "Displaying AWS Credentials file-path"
    value: ${{ steps.assume_credentials.outputs.credentials-file }}
####----------------------------------------------------------------------------
runs:
  using: "composite"
  steps: 
    ####----------------------------------------------------------------------------
    ## AWS STS Assume Role
    - name: AWS STS Assume Role
      id: assume_credentials
      shell: bash
      run: |
        if [[ ${{ inputs.session-timestamp }} == '' ]]; then
                session_timestamp="DevOpsPipeline--$(date +"%Y%m%d%H%M%S")";
          else  session_timestamp="${{ inputs.session-timestamp }}";
        fi;
        declare -a credentials=(
            aws_access_key_id~${{ inputs.aws-access-key-id }}
            aws_secret_access_key~${{ inputs.aws-secret-access-key }}
          ) ;
        ## echo -e "\nDefault Credentials:\n${credentials[@]}" ;
        echo -e "\nInjecting Default User-Credentials into AWS-Credentials file: ${{ inputs.aws-shared-credentials-file }}\n";
        for credential in ${credentials[@]}; do
          ## echo -e "Injecting Default User-Credential: ${credential%\~*} = ${credential#*\~} ..." ;
          sed -i -e "s|^\(${credential%\~*}\)\( =\)\(.*\)$|\1\2 ${credential#*\~}|g" ${{ inputs.aws-shared-credentials-file }} ;
        done ;
        ## echo -e "\nDisplay Default User-Credentails (file):" ;
        ## cat ${{ inputs.aws-shared-credentials-file }} ;
        echo -e "Initiating STS Assume Role request ..." ;
        aws --profile ${{ inputs.aws-default-profile }} \
            --region ${{ inputs.aws-default-region }} \
            sts assume-role \
            --role-arn arn:aws:iam::${{ inputs.aws-default-account }}:role/${{ inputs.devops-access-role }} \
            --role-session-name "${session_timestamp}" ;
        declare -a session_token=($(
            aws --profile ${{ inputs.aws-default-profile }} \
                --region ${{ inputs.aws-default-region }} \
                sts assume-role \
                --role-arn arn:aws:iam::${{ inputs.aws-default-account }}:role/${{ inputs.devops-access-role }} \
                --role-session-name "${session_timestamp}" \
                --query 'Credentials.{aki:AccessKeyId,sak:SecretAccessKey,stk:SessionToken,sts:Expiration}' \
                --output text
             )) ;
        echo -e "Fetched STS Assumed Role Values:" ;
        ## echo -e "Session Token:\n${session_token[@]}" ;
        declare -a session_items=(AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN AWS_TOKEN_EXPIRES) ;
        echo -e "\nConstructed Session Items [array]:\n${session_items[@]}\n" ;
        counter=0; for xkey in "${session_token[@]}"; do
          ## eval "export ${session_items[$((counter++))]}=${xkey}" ;
          echo -e "Exporting Session Variables: ${session_items[${counter}]} = ${xkey}" ;
          eval "echo '::set-env name=${session_items[$((counter++))]}::${xkey}'" ;
        done ;
        ## Displaying Shared-Credentials file:
        echo '::set-output name=credentials-file::${{ inputs.aws-shared-credentials-file }}' ;
        ####----------------------------------------------------------------------------
        ## echo '::add-mask::${{ inputs.devops-account-id }}' ;
        echo -e "\nObtaining STS Caller Identity (First-Time)" ;
        aws --profile ${{ inputs.aws-default-profile }} \
            --region ${{ inputs.aws-default-region }} \
            sts get-caller-identity ;
        ####----------------------------------------------------------------------------
        echo -e "===== ${AWS_SESSION_TOKEN} =====";
        declare -a credentials=(
            aws_access_key_id~${AWS_ACCESS_KEY_ID}
            aws_secret_access_key~${AWS_SECRET_ACCESS_KEY}
            aws_session_token~${AWS_SESSION_TOKEN}
            x_principal_arn~arn:aws:iam::${{ inputs.aws-default-account }}:user/${{ inputs.devops-account-name }}
            x_security_token_expires~${AWS_TOKEN_EXPIRES}
          ) ;
        echo -e "\nDisplaying Latest Credentials:\n${credentials[@]}\n" ;
        for credential in ${credentials[@]}; do
          echo -e "Injecting Credential: -> ${credential%\~*} = ${credential#*\~}" ;
          sed -i -e "s|^\(${credential%\~*}\)\( =\)\(.*\)$|\1\2 ${credential#*\~}|g" ${{ inputs.aws-shared-credentials-file }} ;
        done ;
        ####----------------------------------------------------------------------------
        echo -e;
        cat ${{ inputs.aws-shared-credentials-file }};
        echo -e "\nObtaining Caller Identity (Second-Time)" ;
        aws --profile ${{ inputs.aws-default-profile }} \
            --region ${{ inputs.aws-default-region }} \
            sts get-caller-identity ;
