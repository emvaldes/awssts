name: 'AWS STS Assume-Role'
description: 'Auto-Generate AWS STS Assume-Role'
####----------------------------------------------------------------------------
inputs:
  aws-access-key-id:
    description: 'AWS Access Key-ID'
    required: true
    default: ''
  aws-secret-access-key:
    description: 'AWS Secret Access Key'
    required: true
    default: ''
  aws-shared-credentials-file:
    description: 'AWS Shared Credentials File'
    required: true
    default: ''
  aws-default-profile:
    description: 'AWS Default Profile'
    required: true
    default: 'default'
  aws-default-region:
    description: 'AWS Default Region'
    required: true
    default: 'us-east-1'
  aws-default-account:
    description: 'AWS Default Account Number'
    required: true
    default: ''
  session-timestamp:
    description: 'Session Time-Stamp'
    required: true
    default: ''
  devops-access-role:
    description: 'DevOps Access Role'
    required: true
    default: 'DevOps--Custom-Access.Role'
  devops-account-id:
    description: 'DevOps Account ID'
    required: true
    default: 'DevOps--Custom-Access.Role'
  devops-account-name:
    description: 'DevOps Account Name'
    required: true
    default: ''
####----------------------------------------------------------------------------
outputs:
  credentials-file:
    description: "Displaying AWS STS Assume-Role Configurations"
    value: ${{ steps.generate_credentials.outputs.credentials-file }}
####----------------------------------------------------------------------------
runs:
  using: "composite"
  steps: 
####----------------------------------------------------------------------------
    ## General Credentials
    - name: Generate Credentials
      id: generate_credentials
      shell: bash
      run: |
        echo -e "*** ${{ inputs.aws-shared-credentials-file }} ***";
        if [[ ${{ inputs.session-timestamp }} == '' ]]; then
                session_timestamp="DevOpsPipeline--$(date +"%Y%m%d%H%M%S")";
          else  session_timestamp="${{ inputs.session-timestamp }}";
        fi;
        declare -a credentials=(
            aws_access_key_id~${{ inputs.aws-access-key-id }}
            aws_secret_access_key~${{ inputs.aws-secret-access-key }}
          ) ;
        ## echo -e "\nDefault Credentials:\n${credentials[@]}" ;
        echo -e "\nInjecting Default User-Credentials into AWS-Credentials file! " ;
        for credential in ${credentials[@]}; do
          ## echo -e "Injecting Default User-Credential: ${credential%\~*} = ${credential#*\~} ..." ;
          sed -i -e "s|^\(${credential%\~*}\)\( =\)\(.*\)$|\1\2 ${credential#*\~}|g" ${{ inputs.aws-shared-credentials-file }} ;
        done ;
        ## echo -e "\nDisplay Default User-Credentails (file):" ;
        ## cat ${{ inputs.aws-shared-credentials-file }} ;
        echo -e "Initiating STS Assume Role request ..." ;
        declare -a session_token=($(
            aws --profile ${{ inputs.aws-default-profile }} \
                --region ${{ inputs.aws-default-region }} \
                sts assume-role \
                --role-arn arn:aws:iam::${{ inputs.aws-default-account }}:role/${{ inputs.devops-access-role }} \
                --role-session-name "${session_timestamp}" \
                --query 'Credentials.{aki:AccessKeyId,sak:SecretAccessKey,stk:SessionToken,sts:Expiration}' \
                --output text
             )) ;
        echo -e "Fetched STS Assumed Role Values:" ;
        ## echo -e "Session Token:\n${session_token[@]}" ;
        declare -a session_items=(AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN AWS_TOKEN_EXPIRES) ;
        echo -e "\nConstructed Session Items [array]:\n${session_items[@]}\n" ;
        counter=0; for xkey in "${session_token[@]}"; do
          ## eval "export ${session_items[$((counter++))]}=${xkey}" ;
          echo -e "Exporting Session Variables: ${session_items[${counter}]} = ${xkey}" ;
          eval "echo '::set-env name=${session_items[$((counter++))]}::${xkey}'" ;
        done ;
        ## Displaying Shared-Credentials file:
        echo '::set-output name=credentials-file::${{ inputs.aws-shared-credentials-file }}' ;
####----------------------------------------------------------------------------
    - name: testxyz
      id: testxyz
      shell: bash
      run: |
        export AWS_ACCESS_KEY_ID="${{ env.AWS_ACCESS_KEY_ID }}" ;
        export AWS_SECRETS_ACCESS_KEY="${{ env.AWS_SECRETS_ACCESS_KEY }}" ;
        echo -e "Test-0: ${AWS_ACCESS_KEY_ID}";
        echo -e "Test-0: ${AWS_SECRETS_ACCESS_KEY}";
#       continue-on-error: false
#     - name: Check On Failures
#       if: steps.generate_credentials.outputs.status == 'failure'
#       run: echo "${{ steps.generate_credentials.outputs.status }}" ;
####----------------------------------------------------------------------------
    ## Inspect Credentials
    - name: Inspecting User Credentials
      id: inspect_credentials
      shell: bash
      run: |
        echo -e "Test-1: ${AWS_ACCESS_KEY_ID}";
        echo -e "Test-2: ${AWS_SECRETS_ACCESS_KEY}";
        echo ::add-mask::${{ inputs.devops-account-id }} ;
        echo -e "Obtaining STS Caller Identity (First-Time)" ;
        aws --profile ${{ inputs.aws-default-profile }} \
            --region ${{ inputs.aws-default-region }} \
            sts get-caller-identity ;
#       continue-on-error: false
#     - name: Check On Failures
#       if: steps.inspect_credentials.outputs.status == 'failure'
#       run: echo "${{ steps.inspect_credentials.outputs.status }}" ;
####----------------------------------------------------------------------------
    ## DevOps Assume-Role
    - name: DevOps Assume-Role
      id: devops_assumerole
      shell: bash
      run: |
        echo -e "Test-3: ${AWS_ACCESS_KEY_ID}";
        echo -e "Test-4: ${AWS_SECRETS_ACCESS_KEY}";
        declare -a credentials=(
            aws_access_key_id~${AWS_ACCESS_KEY_ID }
            aws_secret_access_key~$${AWS_SECRET_ACCESS_KEY }
            aws_session_token~${AWS_SESSION_TOKEN}
            x_principal_arn~arn:aws:iam::${{ inputs.aws-default-account }}:user/${{ inputs.devops-account-name }}
            x_security_token_expires~${AWS_TOKEN_EXPIRES}
          ) ;
        ## echo -e "Displaying Latest Credentials:\n${credentials[@]}\n" ;
        for credential in ${credentials[@]}; do
          ## echo -e "Injecting Latest Credential:\n${credential%\~*} = ${credential#*\~} ..." ;
          sed -i -e "s|^\(${credential%\~*}\)\( =\)\(.*\)$|\1\2 ${credential#*\~}|g" ${{ inputs.aws-shared-credentials-file }} ;
        done ;
        echo -e "\nDisplaying Enviroment Settings ...\n" ;
        echo -e "Terraform Cloud-Region: ${AWS_DEFAULT_REGION} \n" ;
        echo -e "AWS Target Account: ${AWS_DEFAULT_ACCOUNT}" ;
        echo -e "AWS Access Key-ID: ${AWS_ACCESS_KEY_ID}" ;
        echo -e "AWS Secret Access Key: ${AWS_SECRET_ACCESS_KEY}" ;
        echo -e "AWS Session Token: ${AWS_SESSION_TOKEN}" ;
#       continue-on-error: false
#     - name: Check On Failures
#       if: steps.devops_assumerole.outputs.status == 'failure'
#       run: echo "${{ steps.devops_assumerole.outputs.status }}" ;
####----------------------------------------------------------------------------
    ## Confirm Credentials
    - name: Confirming User Credentials
      id: confirm_credentials
      shell: bash
      run: |
        echo -e "Test-5: ${AWS_ACCESS_KEY_ID}";
        echo -e "Test-6: ${AWS_SECRETS_ACCESS_KEY}";
        echo -e "Obtaining Caller Identity (Second-Time)" ;
        aws --profile ${{ inputs.aws-default-profile }} \
            --region ${{ inputs.aws-default-region }} \
            sts get-caller-identity ;
#       continue-on-error: false
#     - name: Check On Failures
#       if: steps.confirm_credentials.outputs.status == 'failure'
#       run: echo "${{ steps.confirm_credentials.outputs.status }}" ;
####----------------------------------------------------------------------------
    ## Validating AWS CLI
    - name: Validating AWS CLI
      id: validate_awscli
      shell: bash
      run: |
        echo -e "Listing Current Credentials Configurations ..." ;
        cat ${{ inputs.aws-shared-credentials-file }} ;
        aws configure list ;
        echo ::add-mask::${{ env.devops-account-id }} ;
        echo -e "\nListing IAM Users (Assumed-Role):" ;
        aws --profile ${{ inputs.aws-default-profile }} \
            --region ${{ inputs.aws-default-region }} \
            iam list-users \
            --query 'Users[?UserName==`'${{ inputs.devops-account-name }}'`]' ;
#       continue-on-error: false
#     - name: Check On Failures
#       if: steps.validate_awscli.outputs.status == 'failure'
#       run: echo "${{ steps.validate_awscli.outputs.status }}" ;
####----------------------------------------------------------------------------
