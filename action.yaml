name: Generate Credentials
description: 'Generate Credentials'

####----------------------------------------------------------------------------

inputs:

  aws-access-key-id:
    description: 'AWS Access Key-ID'
    required: true
    default: ''

  aws-secret-access-key:
    description: 'AWS Secret Access Key'
    required: true
    default: ''

  aws-default-account:
    description: 'AWS Default Account Number'
    required: true
    default: ''

  aws-default-profile:
    description: 'AWS Default Profile'
    required: false
    default: 'default'

  aws-default-region:
    description: 'AWS Default Region'
    required: false
    default: 'us-east-1'

  devops-access-role:
    description: 'DevOps Access Role'
    required: true
    default: 'DevOps--Custom-Access.Role'

  devops-account-id:
    description: 'DevOps Account ID'
    required: false
    default: ''

  devops-account-name:
    description: 'DevOps Account Name'
    required: true
    default: 'devops'

  private-keypair-file:
    description: 'KeyPair Private Key'
    required: false
    default: 'devops.pem'

  sanitize-output:
    description: 'Sanitize Content Output'
    required: false
    default: false

  aws-config-file:
    description: 'AWS Config File'
    required: false
    default: '.aws/config'

  aws-shared-credentials-file:
    description: 'AWS Shared Credentials File'
    required: false
    default: '.aws/credentials'

  session-timestamp:
    description: 'Session Time-Stamp'
    required: false
    default: ''

  temporary-credentials:
    description: 'AWS Temporary Credentials'
    required: false
    default: false

  verbose-mode:
    description: 'Verbosity Control Mode'
    required: false
    default: false

####----------------------------------------------------------------------------

outputs:

  aws-config-file:
    description: "Exporting AWS Config file-path"
    value: ${{ steps.generate-credentials.outputs.aws-config-file }}

  aws-shared-credentials-file:
    description: "Exporting AWS Credentials file-path"
    value: ${{ steps.generate-credentials.outputs.aws-shared-credentials-file }}

  aws-access-key-id:
    description: "Exporting AWS Access Key-ID"
    value: ${{ steps.generate-credentials.outputs.aws-access-key-id }}

  aws-secret-access-key:
    description: "Exporting AWS Secret Access Key"
    value: ${{ steps.generate-credentials.outputs.aws-secret-access-key }}

  aws-session-token:
    description: "Exporting AWS Session Token"
    value: ${{ steps.generate-credentials.outputs.aws-session-token }}

  aws-principal-arn:
    description: "Exporting AWS Principal ARN"
    value: ${{ steps.generate-credentials.outputs.aws-principal-arn }}

  aws-token-expires:
    description: "Exporting AWS Token Expires"
    value: ${{ steps.generate-credentials.outputs.aws-token-expires }}

  aws-default-account:
    description: "Exporting AWS Default Account"
    value: ${{ steps.generate-credentials.outputs.aws-default-account }}

####----------------------------------------------------------------------------

runs:
  using: "composite"
  steps:

    ####------------------------------------------------------------------------
    ## Generate Credentials

    - name: Generate Credentials
      id: generate-credentials
      shell: bash
      run: |

        ####--------------------------------------------------------------------
        ## Note: Disabling masking in favor of account's visibility.
        ## echo '::add-mask::${{ inputs.devops-account-id }}' ;
        ####--------------------------------------------------------------------
        export target_profile="${{ inputs.aws-default-profile }}" ;
        export target_region="${{ inputs.aws-default-region }}" ;
        ####--------------------------------------------------------------------
        ## Custom Shared Credentials file requires relative path to GitHub-Workspace.
        export shared_credentials="${{ github.workspace }}/${{ inputs.aws-shared-credentials-file }}" ;
        ####--------------------------------------------------------------------
        ## Generate ~/.aws/config default file:
        aws_folder=${shared_credentials%\/*} ;
        mkdir -p ${aws_folder} ;
        cat /dev/null > ${aws_folder}/config ;
        echo -e "[profile ${target_profile}]\noutput = json\nregion = ${target_region}" > ${aws_folder}/config ;
        ####--------------------------------------------------------------------
        export AWS_SHARED_CREDENTIALS_FILE="${shared_credentials}" ;
        mkdir -p ${AWS_SHARED_CREDENTIALS_FILE%\/*} ;
        cat /dev/null > ${AWS_SHARED_CREDENTIALS_FILE} ;
        ####------------------------------------------------------------
        echo -e "\nFetched STS Assumed Role Values:" ;
        export AWS_PRINCIPAL_ARN="arn:aws:iam::${{ inputs.aws-default-account }}:user/${{ inputs.devops-account-name }}" ;
        export AWS_DEFAULT_ACCOUNT="$(
            echo "${AWS_PRINCIPAL_ARN}"|cut -d':' -f5
          )" ;
        ####--------------------------------------------------------------------
        if [[ ${{ inputs.temporary-credentials }} == false ]]; then
                declare -a credsfile=() ;
                credsfile+=("[${target_profile}]") ;
                credsfile+=("aws_access_key_id = ") ;
                credsfile+=("aws_secret_access_key = ") ;
                credsfile+=("aws_session_token = ") ;
                credsfile+=("x_principal_arn = ") ;
                credsfile+=("x_security_token_expires = ") ;
                cat /dev/null > ${AWS_SHARED_CREDENTIALS_FILE} ;
                oIFS="${IFS}"; IFS=$'\n' ;
                for xline in ${credsfile[@]}; do
                  echo -e "${xline}" >> ${AWS_SHARED_CREDENTIALS_FILE} ;
                done; IFS="${oIFS}" ;
                ####------------------------------------------------------------
                export timestamp="${{ inputs.session-timestamp }}" ;
                if [[ ${#timestamp} -gt 0 ]]; then
                        session_timestamp="${{ inputs.session-timestamp }}" ;
                  else  session_timestamp="SessionTimestamp--$(date +"%Y%m%d%H%M%S")" ;
                fi; unset timestamp ;
                ####------------------------------------------------------------
                ## Processing Access-KeyID and Secret Access-Key only.
                declare -a credentials=(
                    aws_access_key_id~${{ inputs.aws-access-key-id }}
                    aws_secret_access_key~${{ inputs.aws-secret-access-key }}
                  ) ;
                echo -e "\nInjecting Default User-Credentials into AWS-Credentials file: ${AWS_SHARED_CREDENTIALS_FILE}\n" ;
                for credential in ${credentials[@]}; do
                  sed -i -e "s|^\(${credential%\~*}\)\( =\)\(.*\)$|\1\2 ${credential#*\~}|g" ${AWS_SHARED_CREDENTIALS_FILE} ;
                done ;
                # echo -e "Shared Credentials file: \n" ;
                # cat ${AWS_SHARED_CREDENTIALS_FILE} ; echo -e ;
                ####------------------------------------------------------------
                echo -e "Initiating STS Assume Role request ..." ;
                stscli_command="$(
                    echo aws --profile ${target_profile} \
                             --region ${target_region} \
                             sts assume-role \
                             --role-arn arn:aws:iam::${{ inputs.aws-default-account }}:role/${{ inputs.devops-access-role }} \
                             --role-session-name ${session_timestamp}
                  )";
                echo -en "\n> ${stscli_command} ;\n";
                declare -a session_token=($(
                    eval "${stscli_command} \
                         --query 'Credentials.{aki:AccessKeyId,sak:SecretAccessKey,stk:SessionToken,sts:Expiration}' \
                         --output text";
                  ));
                ####------------------------------------------------------------
                ## echo -e "\nFetched STS Assumed Role Values:" ;
                ## export AWS_PRINCIPAL_ARN="arn:aws:iam::${{ inputs.aws-default-account }}:user/${{ inputs.devops-account-name }}" ;
                ## export AWS_DEFAULT_ACCOUNT="$(
                ##     echo "${AWS_PRINCIPAL_ARN}"|cut -d':' -f5
                ##   )" ;
                ####------------------------------------------------------------
                declare -a session_items=(
                    AWS_ACCESS_KEY_ID
                    AWS_SECRET_ACCESS_KEY
                    AWS_SESSION_TOKEN
                    AWS_TOKEN_EXPIRES
                    AWS_PRINCIPAL_ARN
                    AWS_DEFAULT_ACCOUNT
                  ) ;
                echo -e "\nConstructed Session Items [array]:\n${session_items[@]}\n" ;
                counter=0; for xkey in "${session_token[@]}"; do
                  eval "export ${session_items[$((counter++))]}=${xkey}" ;
                done ;
                ####------------------------------------------------------------
                echo -e "Obtaining Caller Identity (Default-Role):" ;
                aws --profile ${target_profile} \
                    --region ${target_region} \
                    sts get-caller-identity \
                | sed -e 's|\("UserId": "AIDA\)\(.*\)\("\)|\1***\3|' ;
                ####------------------------------------------------------------
                ## Exporting AWS Shared-Credentials file:
                declare -a credential_properties=(
                    aws_access_key_id~${AWS_ACCESS_KEY_ID}
                    aws_secret_access_key~${AWS_SECRET_ACCESS_KEY}
                    aws_session_token~${AWS_SESSION_TOKEN}
                    x_security_token_expires~${AWS_TOKEN_EXPIRES}
                    x_principal_arn~${AWS_PRINCIPAL_ARN}
                  ) ;
                echo -e;
                for credential_property in ${credential_properties[@]}; do
                  ## echo -e "Injecting Credential: -> ${credential_property%\~*} = ${credential_property#*\~}" ;
                  sed -i -e "s|^\(${credential_property%\~*}\)\( =\)\(.*\)$|\1\2 ${credential_property#*\~}|g" ${AWS_SHARED_CREDENTIALS_FILE} ;
                done ;
          else  ####------------------------------------------------------------
                ## Decoding Temporary-Credentials into the Shared Credentials-File.
                echo -en "${{ inputs.temporary-credentials }}" | base64 --decode > ${AWS_SHARED_CREDENTIALS_FILE} ;
                ## echo -e ; cat ${AWS_SHARED_CREDENTIALS_FILE} ;
                ####------------------------------------------------------------
                ## Decoding Private Key-Pair Secret into ~/.ssh/${{ inputs.private-keypair-file }} file.
                mkdir -p ${{ github.workspace }}/.ssh ;
                echo -en "${PRIVATE_KEYPAIR_SECRET}" | base64 --decode > ${{ github.workspace }}/.ssh/${{ inputs.private-keypair-file }} ;
                ## echo -e ; cat ${{ github.workspace }}/.ssh/${{ inputs.private-keypair-file }} ;
        fi ;
        ####--------------------------------------------------------------------
        echo -e "Obtaining Caller Identity (Assumed-Role):" ;
        aws --profile ${target_profile} \
            --region ${target_region} \
            sts get-caller-identity \
        | sed -e 's|\("UserId": "\)\(.*\)\:\(.*\)|\1***:\3|' ;
        ####--------------------------------------------------------------------
        ## echo -e "Exporting 'AWS_CONFIG_FILE' [ ${aws_folder}/config ]" ;

        eval "echo \"AWS_CONFIG_FILE=${aws_folder}/config\"" ;
        echo "AWS_CONFIG_FILE=${aws_folder}/config" >> ${GITHUB_ENV} ;
        echo -e ;
        ####--------------------------------------------------------------------
        declare credential_elements=(
            aws-shared-credentials-file~AWS_SHARED_CREDENTIALS_FILE~${AWS_SHARED_CREDENTIALS_FILE}
            aws-default-profile~AWS_DEFAULT_PROFILE~default
            aws-access-key-id~AWS_ACCESS_KEY_ID~${AWS_ACCESS_KEY_ID}
            aws-secret-access-key~AWS_SECRET_ACCESS_KEY~${AWS_SECRET_ACCESS_KEY}
            aws-session-token~AWS_SESSION_TOKEN~${AWS_SESSION_TOKEN}
            aws-token-expires~AWS_TOKEN_EXPIRES~${AWS_TOKEN_EXPIRES}
            aws-principal-arn~AWS_PRINCIPAL_ARN~${AWS_PRINCIPAL_ARN}
            aws-default-account~AWS_DEFAULT_ACCOUNT~${AWS_DEFAULT_ACCOUNT}
          );
        regex="^(.*)~(.*)~(.*)$";
        for element in ${credential_elements[@]}; do
          if [[ ${element} =~ ${regex} ]]; then
            setoutput="${BASH_REMATCH[1]}";
            environment="${BASH_REMATCH[2]}";
            credential="${BASH_REMATCH[3]}";
            declare -a sanitize=(
                AWS_SESSION_TOKEN
                AWS_ACCESS_KEY_ID
                AWS_SECRET_ACCESS_KEY
              ) ;
            if [[ ${{ inputs.sanitize-output }} == true ]]; then
              for xitem in ${sanitize[@]}; do
                [[ ${environment} == ${xitem} ]] && credential='***' ;
              done ;
            fi ;
            echo -e "Exporting '${environment}' [ ${credential} ]" ;
            ## eval "echo \"${environment}=${credential}\"" ;
            echo "${environment}=${credential}" >> ${GITHUB_ENV} ;
          fi ;
        done ;
        ####--------------------------------------------------------------------
        echo -e "\nCompleted! " ;
        ####--------------------------------------------------------------------
