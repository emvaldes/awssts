name: 'Hello World'
description: 'Greet someone'
inputs:
  who-to-greet:  # id of input
    description: 'Who to greet'
    required: true
    default: 'World'
  aws-access-key-id:
    description: 'AWS Access Key-ID'
    required: true
    default: ''
  aws-secret-access-key:
    description: 'AWS Secret Access Key'
    required: true
    default: ''
  aws-shared-credentials-file:
    description: 'AWS Shared Credentials File'
    required: true
    default: ''
  aws-default-profile:
    description: ''
    required: true
    default: ''
  aws-default-region:
    description: ''
    required: true
    default: ''
  aws-default-account:
    description: ''
    required: true
    default: ''
  devops-access-role:
    description: ''
    required: true
    default: ''
  session-timestamp:
    description: ''
    required: true
    default: ''
outputs:
  random-number: 
    description: "Random number"
    value: ${{ steps.random-number-generator.outputs.random-id }}
runs:
  using: "composite"
  steps: 

    ## General Credentials
    - name: Generate Credentials
      id: generate_credentials
      shell: bash
      run: |
        declare -a credentials=(
            aws_access_key_id~${{ inputs.aws-access-key-id }}
            aws_secret_access_key~${{ inputs.aws-secret-access-key }}
          ) ;
        ## echo -e "\nDefault Credentials:\n${credentials[@]}" ;
        echo -e "\nInjecting Default User-Credentials into AWS-Credentials file! \n" ;
        for credential in ${credentials[@]}; do
          echo -e "Injecting Default User-Credential: ${credential%\~*} = ${credential#*\~} ..." ;
          sed -i -e "s|^\(${credential%\~*}\)\( =\)\(.*\)$|\1\2 ${credential#*\~}|g" ${{ inputs.aws-shared-credentials-file }} ;
        done ;
        ## echo -e "\nDisplay Default User-Credentails (file):" ;
        ## cat ${{ inputs.aws-shared-credentials-file }} ;
        echo -e "\nInitiating STS Assume Role request ..." ;
        declare -a session_token=($(
            aws --profile ${{ inputs.aws-default-profile }} \
                --region ${{ inputs.aws-default-region }} \
                sts assume-role \
                --role-arn arn:aws:iam::${{ inputs.aws-default-account }}:role/${{ inputs.devops-access-role }} \
                --role-session-name "${{ inputs.session-timestamp }}" \
                --query 'Credentials.{aki:AccessKeyId,sak:SecretAccessKey,stk:SessionToken,sts:Expiration}' \
                --output text
             )) ;
        echo -e "Fetched STS Assumed Role Values:" ;
        ## echo -e "Session Token:\n${session_token[@]}" ;
        declare -a session_items=(AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN AWS_TOKEN_EXPIRES) ;
        ## echo -e "\nConstructed Session Items [array]:\n${session_items[@]}\n" ;
        counter=0; for xkey in "${session_token[@]}"; do
          ## eval "export ${session_items[$((counter++))]}=${xkey}" ;
          ## echo -e "Exporting Session Variables: ${session_items[${counter}]} = ${xkey}" ;
          eval "echo '::set-env name=${session_items[$((counter++))]}::${xkey}'" ;
        done ;
#       continue-on-error: false
#     - name: Check On Failures
#       if: steps.generate_credentials.outputs.status == 'failure'
#       run: echo "${{ steps.generate_credentials.outputs.status }}" ;














    - run: echo Hello ${{ inputs.who-to-greet }}.
      shell: bash
    - id: random-number-generator

      run: echo "::set-output name=random-id::$(echo $RANDOM)"
      shell: bash

    - run: |
        echo -e "\nListing: env";
        env|sort -n;
        echo -e "\nListing: set";
        set|sort -n;
        echo -e "${CI}"; ##	Always set to true.
        echo -e "${HOME}"; ##		The path to the GitHub home directory used to store user data. For example, /github/home.
        echo -e "${GITHUB_WORKFLOW}";     ##		The name of the workflow.
        echo -e "${GITHUB_RUN_ID}";       ##		A unique number for each run within a repository. This number does not change if you re-run the workflow run.
        echo -e "${GITHUB_RUN_NUMBER}";   ##		A unique number for each run of a particular workflow in a repository. This number begins at 1 for the workflow's first run, and increments with each new run. This number does not change if you re-run the workflow run.
        echo -e "${GITHUB_ACTION}";       ##		The unique identifier (id) of the action.
        echo -e "${GITHUB_ACTIONS}";      ##		Always set to true when GitHub Actions is running the workflow. You can use this variable to differentiate when tests are being run locally or by GitHub Actions.
        echo -e "${GITHUB_ACTOR}";        ##		The name of the person or app that initiated the workflow. For example, octocat.
        echo -e "${GITHUB_REPOSITORY}";   ##		The owner and repository name. For example, octocat/Hello-World.
        echo -e "${GITHUB_EVENT_NAME}";   ##		The name of the webhook event that triggered the workflow.
        echo -e "${GITHUB_EVENT_PATH}";   ##		The path of the file with the complete webhook event payload. For example, /github/workflow/event.json.
        echo -e "${GITHUB_WORKSPACE}";    ##		The GitHub workspace directory path. The workspace directory contains a subdirectory with a copy of your repository if your workflow uses the actions/checkout action. If you don't use the actions/checkout action, the directory will be empty. For example, /home/runner/work/my-repo-name/my-repo-name.
        echo -e "${GITHUB_SHA}";          ##		The commit SHA that triggered the workflow. For example, ffac537e6cbbf934b08745a378932722df287a53.
        echo -e "${GITHUB_REF}";          ##		The branch or tag ref that triggered the workflow. For example, refs/heads/feature-branch-1. If neither a branch or tag is available for the event type, the variable will not exist.
        echo -e "${GITHUB_HEAD_REF}";     ##		Only set for forked repositories. The branch of the head repository.
        echo -e "${GITHUB_BASE_REF}";     ##		Only set for forked repositories. The branch of the base repository.
        echo -e "${GITHUB_SERVER_URL}";   ##		Returns the URL of the GitHub server. For example: https://github.com.
        echo -e "${GITHUB_API_URL}";      ##		Returns the API URL. For example: https://api.github.com.
        echo -e "${GITHUB_GRAPHQL_URL}";  ##		Returns the GraphQL API URL. For example: https://api.github.com/graphql.
        echo -e "\nAction Plan: ${{ github.action_path }}";
        echo -e "\n\nTesting [length]: ${{ inputs.devops-access-role }}\n\n";
        ## ./goodbye.sh;
      shell: bash
